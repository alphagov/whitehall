require "test_helper"
require "capybara/rails"

class ContentObjectStore::ContentBlock::EditionsTest < ActionDispatch::IntegrationTest
  include Capybara::DSL
  extend Minitest::Spec::DSL
  include ContentObjectStore::Engine.routes.url_helpers

  before do
    login_as_admin
    feature_flags.switch!(:content_object_store, true)
  end

  describe "#create" do
    let(:content_block_document) { create(:content_block_document, :email_address) }
    let!(:original_edition) { create(:content_block_edition, :email_address, document: content_block_document) }

    before do
      stub_request_for_schema("email_address")
    end

    it "creates a new content block with params generated by the schema" do
      document_attributes = {
        title: "Some Title",
        block_type: "email_address",
      }.with_indifferent_access
      details = {
        "foo" => "Foo text",
        "bar" => "Bar text",
      }

      organisation = create(:organisation)

      assert_changes -> { content_block_document.editions.count }, from: 1, to: 2 do
        assert_changes -> { ContentObjectStore::ContentBlock::Version.count }, from: 1, to: 2 do
          post content_object_store.content_object_store_content_block_document_editions_path(content_block_document), params: {
            something: "else",
            "content_block/edition": {
              document_attributes:,
              details:,
              organisation_id: organisation.id,
            },
          }
        end
      end

      content_block_document.reload
      new_edition = content_block_document.editions.last
      new_author = ContentObjectStore::ContentBlock::EditionAuthor.last
      new_version = ContentObjectStore::ContentBlock::Version.last
      new_edition_organisation = ContentObjectStore::ContentBlock::EditionOrganisation.last

      assert_equal document_attributes[:title], content_block_document.title
      assert_equal document_attributes[:block_type], content_block_document.block_type
      assert_equal details, new_edition.details

      assert_equal new_edition.document_id, content_block_document.id
      assert_equal new_edition.creator, new_author.user

      assert_equal new_version.whodunnit, new_author.user.id.to_s

      assert_equal new_edition_organisation.organisation_id, organisation.id
      assert_equal new_edition_organisation.content_block_edition_id, new_edition.id
    end

    it "should render the template when the edition is invalid" do
      ContentObjectStore::ContentBlock::Edition.any_instance.expects(:valid?).returns(false)

      post content_object_store.content_object_store_content_block_document_editions_path(content_block_document), params: {
        "content_block/edition": {
          document_attributes: {
            block_type: "email_address",
          },
        },
      }

      assert_template "content_object_store/content_block/documents/new"
    end

    it "should render the template when the document is invalid" do
      ContentObjectStore::ContentBlock::Edition.any_instance.expects(:valid?).returns(true)
      ContentObjectStore::ContentBlock::Document.any_instance.expects(:valid?).returns(false)

      post content_object_store.content_object_store_content_block_document_editions_path(content_block_document), params: {
        "content_block/edition": {
          document_attributes: {
            block_type: "email_address",
          },
        },
      }

      assert_template "content_object_store/content_block/documents/new"
    end
  end
end

def stub_request_for_schema(block_type)
  schema = stub(id: "content_block_type", fields: %w[foo bar], name: "schema", body: {}, block_type:)
  ContentObjectStore::ContentBlock::Schema.stubs(:find_by_block_type).with(block_type).returns(schema)
end
