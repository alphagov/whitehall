require "test_helper"
require "capybara/rails"

class ContentObjectStore::ContentBlock::EditionsTest < ActionDispatch::IntegrationTest
  include Capybara::DSL
  extend Minitest::Spec::DSL

  before do
    login_as_admin
    feature_flags.switch!(:content_object_store, true)
  end

  describe "#new" do
    before do
      schemas = build_list(:content_block_schema, 1)
      ContentObjectStore::ContentBlock::Schema.stubs(:all).returns(schemas)
    end

    it "shows an error message when block type is empty" do
      visit "#{content_object_store.new_content_object_store_content_block_edition_path}?block_type="

      assert_text "You must select a block type"
    end
  end

  describe "#create" do
    before do
      @content_id = "49453854-d8fd-41da-ad4c-f99dbac601c3"

      stub_request_for_schema("email_address")
    end

    it "creates a new content block with params generated by the schema" do
      document_attributes = {
        title: "Some Title",
        block_type: "email_address",
      }.with_indifferent_access
      details = {
        "foo" => "Foo text",
        "bar" => "Bar text",
      }

      organisation = create(:organisation)

      # This UUID is created by the database so instead of loading the record
      # we stub the initial creation so we know what UUID to check for.
      ContentObjectStore::ContentBlock::Edition.any_instance.stubs(:create_random_id)
                                               .returns(@content_id)

      assert_changes -> { ContentObjectStore::ContentBlock::Document.count }, from: 0, to: 1 do
        assert_changes -> { ContentObjectStore::ContentBlock::Edition.count }, from: 0, to: 1 do
          assert_changes -> { ContentObjectStore::ContentBlock::EditionAuthor.count }, from: 0, to: 1 do
            assert_changes -> { ContentObjectStore::ContentBlock::Version.count }, from: 0, to: 1 do
              post content_object_store.content_object_store_content_block_editions_path, params: {
                something: "else",
                content_block_edition: {
                  document_attributes:,
                  details:,
                  organisation_id: organisation.id,
                },
              }
            end
          end
        end
      end

      new_document = ContentObjectStore::ContentBlock::Document.find_by!(content_id: @content_id)
      new_edition = new_document.editions.first
      new_author = ContentObjectStore::ContentBlock::EditionAuthor.first
      new_version = ContentObjectStore::ContentBlock::Version.first
      new_edition_organisation = ContentObjectStore::ContentBlock::EditionOrganisation.first

      assert_equal document_attributes[:title], new_document.title
      assert_equal document_attributes[:block_type], new_document.block_type
      assert_equal details, new_edition.details

      assert_equal new_edition.document_id, new_document.id
      assert_equal new_edition.creator, new_author.user

      assert_equal new_document.latest_edition_id, new_edition.id

      assert_equal new_version.whodunnit, new_author.user.id.to_s

      assert_equal new_edition_organisation.organisation_id, organisation.id
      assert_equal new_edition_organisation.content_block_edition_id, new_edition.id
    end

    it "should render the template when a validation error occurs" do
      edition = build(:content_block_edition)
      err = ActiveRecord::RecordInvalid.new(edition)
      ContentObjectStore::CreateEditionService.any_instance
                                              .stubs(:call)
                                              .raises(err)

      post content_object_store.content_object_store_content_block_editions_path, params: {
        content_block_edition: {
          document_attributes: {
            block_type: "email_address",
          },
        },
      }

      assert_template :new
    end
  end
end

def stub_request_for_schema(block_type)
  schema = stub(id: "content_block_type", fields: %w[foo bar], name: "schema", body: {}, block_type:)
  ContentObjectStore::ContentBlock::Schema.stubs(:find_by_block_type).with(block_type).returns(schema)
end
