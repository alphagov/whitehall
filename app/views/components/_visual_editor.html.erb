<%
  id ||= "#{name}-#{SecureRandom.hex(4)}"
  label_id = "#{id}-label"
  value ||= nil
  error_items ||= nil
  images ||= {}

  error_class = "govuk-form-group--error" if error_items
%>

<%= tag.div class: error_class, "data-module": "visual-editor", "data-images": images.to_json do %>
  <div class="app-c-visual-editor__govspeak-editor-wrapper">
    <%= render "components/govspeak_editor", {
      label:,
      name:,
      id:,
      value:,
      rows:,
      error_items:,
      right_to_left:,
      data_attributes:,
    } %>
  </div>

  <div class="app-c-visual-editor__visual-editor-wrapper">
    <%= render "govuk_publishing_components/components/label", {
        id: label_id,
        html_for: id,
      }.merge(label.symbolize_keys) %>
    <div class="js-app-c-visual-editor__inset-text">
    <%= render "govuk_publishing_components/components/inset_text", {
    } do %>
      <p class="govuk-body">Continue to edit in markdown if you have to add or format content that is not available.</p>
      <p class="govuk-body">Visual Editor can only be used once per document and subsequent editing needs to be done in markdown.</p>
      <p class="govuk-body">All changes made in Visual Editor will be saved when you press save and exit to markdown.</p>
      <%= render "govuk_publishing_components/components/button", {
        text: "Continue editing in markdown",
        secondary_solid: true,
        type: "button",
        classes: "js-app-c-visual-editor__exit-button",
        destructive: true,
        data_attributes: {
          "ga4-event": {
            tool_name: "Visual Editor",
          }.to_json,
        },
      } %>
    <% end %>
    </div>

    <div class="app-c-visual-editor__content">
      <%= govspeak_to_html(
        value,
        preview: true,
       ) %>
    </div>

    <div class="app-c-visual-editor__container"></div>
  </div>

  <%= hidden_field_tag hidden_field_name, false, {class: "app-c-visual-editor__hidden-field"} %>
<% end %>

<%= javascript_include_tag "components/visual-editor", :type => "module" %>
